<?php
   /**
    * Users Controller
    *
    * Availabe Methods are Index, json, xml, read, create, update & delete
    * Generated by Harviacode Codeigniter CRUD Generator @ 2017-12-07 10:34:51.
    * For more info about harviacode visit @link.
    *
    * @author YOUR_NAME_HERE
    * @copyright Copyright (c) 2014 -2017, YOUR_NAME, YOUR_LINK
    * @license License_LINK, License_NAME
    * @link http://harviacode.com
    * @filesource ../application/modules/users/controllers/Users.php
    *
   */
   if (!defined('BASEPATH')) exit('No direct script access allowed');

   class Users extends MY_Controller {

      function __construct() {
         parent::__construct();
         $this->load->model('Users_model');
         $this->load->library('form_validation');
   	}
      
      /**
       * Index
       *
       * Regular Tables
       * @param
       * @return
      */
      public function index() {
         $q = urldecode($this->input->get('q', TRUE));
         $start = intval($this->input->get('start'));

         if ($q <> '') {
            $config['base_url']  = base_url() . 'users/index.html?q=' . urlencode($q);
            $config['first_url'] = base_url() . 'users/index.html?q=' . urlencode($q);
         } else {
            $config['base_url']  = base_url() . 'users/index.html';
            $config['first_url'] = base_url() . 'users/index.html';
         }

         $config['per_page']           = 10;
         $config['page_query_string']  = TRUE;
         $config['total_rows']         = $this->Users_model->total_rows($q);
         $config['attributes']         = array('class' => 'page-link');
         $users                        = $this->Users_model->get_limit_data($config['per_page'], $start, $q);

         $this->load->library('pagination');
         $this->pagination->initialize($config);

         $data = array(
            'users_data' => $users,
            'q'          => $q,
            'pagination' => $this->pagination->create_links(),
            'total_rows' => $config['total_rows'],
            'start'      => $start,
         );
         $this->load->view('layouts/header');
         $this->load->view('users_list', $data);
         $this->load->view('layouts/footer');
      }

      /**
       * JSON
       *
       * Get json fromat of users
       *
       * @param
       * @return JSON output
      */
      public function json() {
         header('Content-Type: application/json');
         echo $this->Users_model->json();
      }
            
      /**
       * XML
       *
       * Get XML fromat of users
       *
       * @param
       * @return XML output
      */
      public function xml() {
         header('Content-Type: application/xml');
         echo $this->Users_model->xml();
      }
            
      /**
       * Read single element @users
       *
       * @param int $id
       * @return view
      */
      public function read($id) {
         $row = $this->Users_model->get_by_id($id);

         if ($row) {
            $data = array(
   					'id'                 => $row->id,
   					'username'           => $row->username,
   					'email'              => $row->email,
   					'password'           => $row->password,
   					'role'               => $row->role,
   					'active'             => $row->active,
   					'avatar'             => $row->avatar,
   					'verification_code'  => $row->verification_code,
   					'remember_me'        => $row->remember_me,
   					'last_login'         => $row->last_login,
   					'created'            => $row->created,
   					'updated'            => $row->updated,
   				);

            $this->load->view('layouts/header');
            $this->load->view('users_read', $data);
            $this->load->view('layouts/footer');
         } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('users'));
         }
      }

      /**
       * Create new element @users
       *
       * @param
       * @return view
      */
      public function create() {
         $data = array(
               'button'             => 'Create',
               'action'             => 'users/create_action',
   				'id'                 => set_value('id'),
   				'username'           => set_value('username'),
   				'email'              => set_value('email'),
   				'password'           => set_value('password'),
   				'role'               => set_value('role'),
   				'active'             => set_value('active'),
   				'avatar'             => set_value('avatar'),
   				'verification_code'  => set_value('verification_code'),
   				'remember_me'        => set_value('remember_me'),
   				'last_login'         => set_value('last_login'),
   				'created'            => set_value('created'),
   				'updated'            => set_value('updated'),
   			);

         $this->load->view('layouts/header');
         $this->load->view('users_form', $data);
         $this->load->view('layouts/footer');
      }

      /**
       * Validate Creation
       *
       * @param
       * @return view
      */
      public function create_action() {
         $this->_rules();

         if ($this->form_validation->run() == FALSE) {
            $this->create();
         } else {
            $data = array(
   					'username'           => $this->input->post('username',TRUE),
   					'email'              => $this->input->post('email',TRUE),
   					'password'           => $this->input->post('password',TRUE),
   					'role'               => $this->input->post('role',TRUE),
   					'active'             => $this->input->post('active',TRUE),
   					'avatar'             => $this->input->post('avatar',TRUE),
   					'verification_code'  => $this->input->post('verification_code',TRUE),
   					'remember_me'        => $this->input->post('remember_me',TRUE),
   					'last_login'         => $this->input->post('last_login',TRUE),
   					'created'            => $this->input->post('created',TRUE),
   					'updated'            => $this->input->post('updated',TRUE),
   				);

            $this->Users_model->insert($data);
            $this->session->set_flashdata('message', 'Create Record Success');
            redirect(site_url('users'));
         }
      }

      /**
       * Update an element in users
       *
       * @param int $id
       * @return void
      */
      public function update($id) {
         $row = $this->Users_model->get_by_id($id);

         if ($row) {
            $data = array(
                  'button'             => 'Update',
                  'action'             => 'users/update_action',
   					'id'                 => set_value('id', $row->id),
   					'username'           => set_value('username', $row->username),
   					'email'              => set_value('email', $row->email),
   					'password'           => set_value('password', $row->password),
   					'role'               => set_value('role', $row->role),
   					'active'             => set_value('active', $row->active),
   					'avatar'             => set_value('avatar', $row->avatar),
   					'verification_code'  => set_value('verification_code', $row->verification_code),
   					'remember_me'        => set_value('remember_me', $row->remember_me),
   					'last_login'         => set_value('last_login', $row->last_login),
   					'created'            => set_value('created', $row->created),
   					'updated'            => set_value('updated', $row->updated),
   				);

            $this->load->view('layouts/header');
            $this->load->view('users_form', $data);
            $this->load->view('layouts/footer');
         } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('users'));
         }
      }

      /**
       * Validate update
       *
       * @param
       * @return view
      */
      public function update_action() {
         $this->_rules();

         if ($this->form_validation->run() == FALSE) {
            $this->update($this->input->post('id', TRUE));
         } else {
            $data = array(
   					'username'           => $this->input->post('username',TRUE),
   					'email'              => $this->input->post('email',TRUE),
   					'password'           => $this->input->post('password',TRUE),
   					'role'               => $this->input->post('role',TRUE),
   					'active'             => $this->input->post('active',TRUE),
   					'avatar'             => $this->input->post('avatar',TRUE),
   					'verification_code'  => $this->input->post('verification_code',TRUE),
   					'remember_me'        => $this->input->post('remember_me',TRUE),
   					'last_login'         => $this->input->post('last_login',TRUE),
   					'created'            => $this->input->post('created',TRUE),
   					'updated'            => $this->input->post('updated',TRUE),
   			);

            $this->Users_model->update($this->input->post('id', TRUE), $data);
            $this->session->set_flashdata('message', 'Update Record Success');
            redirect(site_url('users'));
         }
      }

      /**
       * Delete an element from users
       *
       * @param int $id
       * @return view
      */
      public function delete($id) {
         $row = $this->Users_model->get_by_id($id);

         if ($row) {
            $this->Users_model->delete($id);
            $this->session->set_flashdata('message', 'Delete Record Success');
            redirect(site_url('users'));
         } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('users'));
         }
      }

      /**
       * Validation Rules @users
       *
       * @param
       * @return
      */
      public function _rules() {
			$this->form_validation->set_rules('username', 'username', 'trim|required');
			$this->form_validation->set_rules('email', 'email', 'trim|required');
			$this->form_validation->set_rules('password', 'password', 'trim|required');
			$this->form_validation->set_rules('role', 'role', 'trim|required');
			$this->form_validation->set_rules('active', 'active', 'trim|required');
			$this->form_validation->set_rules('avatar', 'avatar', 'trim|required');
			$this->form_validation->set_rules('verification_code', 'verification code', 'trim|required');
			$this->form_validation->set_rules('remember_me', 'remember me', 'trim|required');
			$this->form_validation->set_rules('last_login', 'last login', 'trim|required');
			$this->form_validation->set_rules('created', 'created', 'trim|required');
			$this->form_validation->set_rules('updated', 'updated', 'trim|required');
			$this->form_validation->set_rules('id', 'id', 'trim');
			$this->form_validation->set_error_delimiters('<span class="text-danger">', '</span>');
      }

      /**
       * Exports @users in xls format
       *
       * @param
       * @return
      */
      public function excel() {
         $this->load->helper('exportexcel');
         $namaFile = "users.xls";
         $judul = "users";
         $tablehead = 0;
         $tablebody = 1;
         $nourut = 1;

         //penulisan header
         header("Pragma: public");
         header("Expires: 0");
         header("Cache-Control: must-revalidate, post-check=0,pre-check=0");
         header("Content-Type: application/force-download");
         header("Content-Type: application/octet-stream");
         header("Content-Type: application/download");
         header("Content-Disposition: attachment;filename=" . $namaFile . "");
         header("Content-Transfer-Encoding: binary ");

         xlsBOF();

         $kolomhead = 0;
         xlsWriteLabel($tablehead, $kolomhead++, "No");
      	xlsWriteLabel($tablehead, $kolomhead++, "Username");
      	xlsWriteLabel($tablehead, $kolomhead++, "Email");
      	xlsWriteLabel($tablehead, $kolomhead++, "Password");
      	xlsWriteLabel($tablehead, $kolomhead++, "Role");
      	xlsWriteLabel($tablehead, $kolomhead++, "Active");
      	xlsWriteLabel($tablehead, $kolomhead++, "Avatar");
      	xlsWriteLabel($tablehead, $kolomhead++, "Verification Code");
      	xlsWriteLabel($tablehead, $kolomhead++, "Remember Me");
      	xlsWriteLabel($tablehead, $kolomhead++, "Last Login");
      	xlsWriteLabel($tablehead, $kolomhead++, "Created");
      	xlsWriteLabel($tablehead, $kolomhead++, "Updated");

         foreach ($this->Users_model->get_all() as $data) {
            $kolombody = 0;

            //ubah xlsWriteLabel menjadi xlsWriteNumber untuk kolom numeric
            xlsWriteNumber($tablebody, $kolombody++, $nourut);
            xlsWriteLabel($tablebody, $kolombody++, $data->username);
   	      xlsWriteLabel($tablebody, $kolombody++, $data->email);
   	      xlsWriteLabel($tablebody, $kolombody++, $data->password);
   	      xlsWriteNumber($tablebody, $kolombody++, $data->role);
   	      xlsWriteNumber($tablebody, $kolombody++, $data->active);
   	      xlsWriteLabel($tablebody, $kolombody++, $data->avatar);
   	      xlsWriteLabel($tablebody, $kolombody++, $data->verification_code);
   	      xlsWriteLabel($tablebody, $kolombody++, $data->remember_me);
   	      xlsWriteLabel($tablebody, $kolombody++, $data->last_login);
   	      xlsWriteLabel($tablebody, $kolombody++, $data->created);
   	      xlsWriteLabel($tablebody, $kolombody++, $data->updated);

           $tablebody++;
           $nourut++;
         }

         xlsEOF();
         exit();
      }

      /**
       * Exports @users in doc format
       *
       * @param
       * @return
      */
      public function word() {
         header("Content-type: application/vnd.ms-word");
         header("Content-Disposition: attachment;Filename=users.doc");

         $data = array(
            'users_data' => $this->Users_model->get_all(),
            'start'      => 0
         );

         $this->load->view('users/users_doc',$data);
      }

      /**
       * Exports @users in pdf format
       *
       * @param
       * @return
      */
      public function pdf() {
         $data = array(
            'users_data' => $this->Users_model->get_all(),
            'start'      => 0
         );

         ini_set('memory_limit', '32M');

         $html = $this->load->view('users/users_pdf', $data, true);

         $this->load->library('pdf');
         $pdf  = $this->pdf->load();
         $pdf->WriteHTML($html);
         $pdf->Output('users.pdf', 'D');
      }
   }

	/* End of file ../application/modules/users/Users.php */