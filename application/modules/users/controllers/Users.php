<?php
/**
* Users Controller
*
* Availabe Methods are Index, json, xml, read, create, update & delete
* Generated by Harviacode Codeigniter CRUD Generator @ 2017-12-16 12:22:21.
* For more info about harviacode visit @link.
*
* @author YOUR_NAME_HERE
* @copyright Copyright (c) 2014 -2017, YOUR_NAME, YOUR_LINK
* @license License_LINK, License_NAME
* @link http://harviacode.com
* @filesource ../application/modules/users/controllers/Users.php
*
*/
if (!defined('BASEPATH')) exit('No direct script access allowed');

class Users extends MY_Controller {

   function __construct() {
      parent::__construct();
      $this->load->model('Users_model');
      $this->load->library('form_validation');
      // $this->output->enable_profiler(TRUE);
	 }
         /**
         * Index
         *
         * Regular Tables
         * @param
         * @return
         */
         public function index() {
            $q = urldecode($this->input->get('q', TRUE));
            $start = intval($this->input->get('start'));

            if ($q <> '') {
            $config['base_url'] = base_url() . 'users/index.html?q=' . urlencode($q);
            $config['first_url'] = base_url() . 'users/index.html?q=' . urlencode($q);
            } else {
            $config['base_url'] = base_url() . 'users/index.html';
            $config['first_url'] = base_url() . 'users/index.html';
            }

            $config['per_page'] = 10;
            $config['page_query_string'] = TRUE;
            $config['total_rows'] = $this->Users_model->total_rows($q);
            $config['attributes'] = array('class' => 'page-link');
            $users = $this->Users_model->get_limit_data($config['per_page'], $start, $q);

            $this->load->library('pagination');
            $this->pagination->initialize($config);

            $data = array(
            'users_data' => $users,
            'q' => $q,
            'pagination' => $this->pagination->create_links(),
            'total_rows' => $config['total_rows'],
            'start' => $start,
            );
            $this->load->view('layouts/header');
            $this->load->view('users_list', $data);
            $this->load->view('layouts/footer');
         }

         /**
         * JSON
         *
         * Get json fromat of users
         *
         * @param
         * @return JSON output
         */
         public function json() {
            header('Content-Type: application/json');
            echo $this->Users_model->json();
         }
         
         /**
         * XML
         *
         * Get XML fromat of users
         *
         * @param
         * @return XML output
         */
         public function xml() {
            header('Content-Type: application/xml');
            echo $this->Users_model->xml();
         }
         
/**
      * Read single element @users
      *
      * @param int $id
      * @return view
      */
      public function read($id) {
         $row = $this->Users_model->get_by_id($id);

         if ($row) {
            $data = array(
						'id' => $row->id,
						'username' => $row->username,
						'email' => $row->email,
						'password' => $row->password,
						'role' => $row->role,
						'active' => $row->active,
						'avatar' => $row->avatar,
						'verification_code' => $row->verification_code,
						'remember_me' => $row->remember_me,
						'last_login' => $row->last_login,
						'created' => $row->created,
						'updated' => $row->updated,
					);

            $this->load->view('layouts/header');
            $this->load->view('users_read', $data);
            $this->load->view('layouts/footer');
         } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('users'));
         }
      }

      /**
      * Create new element @users
      *
      * @param
      * @return view
      */
      public function create() {
         $data = array(
         'button' => 'Create',
         'action' => 'users/create_action',
					'id' => set_value('id'),
					'username' => set_value('username'),
					'email' => set_value('email'),
					'password' => set_value('password'),
					'role' => set_value('role'),
					'active' => set_value('active'),
					'avatar' => set_value('avatar'),
					'verification_code' => set_value('verification_code'),
					'remember_me' => set_value('remember_me'),
					'last_login' => set_value('last_login'),
					'created' => set_value('created'),
					'updated' => set_value('updated'),
				);

         $this->load->view('layouts/header');
         $this->load->view('users_form', $data);
         $this->load->view('layouts/footer');
      }

      /**
      * Validate Creation
      *
      * @param
      * @return view
      */
      public function create_action() {
         $this->_rules();

         if ($this->form_validation->run() == FALSE) {
            $this->create();
         } else {
            $data = array(
						'username' => $this->input->post('username',TRUE),
						'email' => $this->input->post('email',TRUE),
						'password' => $this->input->post('password',TRUE),
						'role' => $this->input->post('role',TRUE),
						'active' => $this->input->post('active',TRUE),
						'avatar' => $this->input->post('avatar',TRUE),
						'verification_code' => $this->input->post('verification_code',TRUE),
						'remember_me' => $this->input->post('remember_me',TRUE),
						'last_login' => $this->input->post('last_login',TRUE),
						'created' => $this->input->post('created',TRUE),
						'updated' => $this->input->post('updated',TRUE),
					);

            $this->Users_model->insert($data);
            $this->session->set_flashdata('message', 'Create Record Success');
            redirect(site_url('users'));
         }
      }

      /**
      * Update an element in users
      *
      * @param int $id
      * @return void
      */
      public function update($id) {
         $row = $this->Users_model->get_by_id($id);

         if ($row) {
            $data = array(
            'button' => 'Update',
            'action' => 'users/update_action',
						'id' => set_value('id', $row->id),
						'username' => set_value('username', $row->username),
						'email' => set_value('email', $row->email),
						'password' => set_value('password', $row->password),
						'role' => set_value('role', $row->role),
						'active' => set_value('active', $row->active),
						'avatar' => set_value('avatar', $row->avatar),
						'verification_code' => set_value('verification_code', $row->verification_code),
						'remember_me' => set_value('remember_me', $row->remember_me),
						'last_login' => set_value('last_login', $row->last_login),
						'created' => set_value('created', $row->created),
						'updated' => set_value('updated', $row->updated),
					);

            $this->load->view('layouts/header');
            $this->load->view('users_form', $data);
            $this->load->view('layouts/footer');
         } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('users'));
         }
      }

      /**
      * Validate update
      *
      * @param
      * @return view
      */
      public function update_action() {
         $this->_rules();

         if ($this->form_validation->run() == FALSE) {
            $this->update($this->input->post('id', TRUE));
         } else {
            $data = array(
						'username' => $this->input->post('username',TRUE),
						'email' => $this->input->post('email',TRUE),
						'password' => $this->input->post('password',TRUE),
						'role' => $this->input->post('role',TRUE),
						'active' => $this->input->post('active',TRUE),
						'avatar' => $this->input->post('avatar',TRUE),
						'verification_code' => $this->input->post('verification_code',TRUE),
						'remember_me' => $this->input->post('remember_me',TRUE),
						'last_login' => $this->input->post('last_login',TRUE),
						'created' => $this->input->post('created',TRUE),
						'updated' => $this->input->post('updated',TRUE),
				);

            $this->Users_model->update($this->input->post('id', TRUE), $data);
            $this->session->set_flashdata('message', 'Update Record Success');
            redirect(site_url('users'));
         }
      }

      /**
      * Delete an element from users
      *
      * @param int $id
      * @return view
      */
      public function delete($id) {
         $row = $this->Users_model->get_by_id($id);

         if ($row) {
            $this->Users_model->delete($id);
            $this->session->set_flashdata('message', 'Delete Record Success');
            redirect(site_url('users'));
         } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('users'));
         }
      }

      /**
      * Validation Rules @users
      *
      * @param
      * @return
      */
      public function _rules() {
				$this->form_validation->set_rules('username', 'username', 'trim|required');
				$this->form_validation->set_rules('email', 'email', 'trim|required');
				$this->form_validation->set_rules('password', 'password', 'trim|required');
				$this->form_validation->set_rules('role', 'role', 'trim|required');
				$this->form_validation->set_rules('active', 'active', 'trim|required');
				$this->form_validation->set_rules('avatar', 'avatar', 'trim|required');
				$this->form_validation->set_rules('verification_code', 'verification code', 'trim|required');
				$this->form_validation->set_rules('remember_me', 'remember me', 'trim|required');
				$this->form_validation->set_rules('last_login', 'last login', 'trim|required');
				$this->form_validation->set_rules('created', 'created', 'trim|required');
				$this->form_validation->set_rules('updated', 'updated', 'trim|required');

				$this->form_validation->set_rules('id', 'id', 'trim');
				$this->form_validation->set_error_delimiters('<span class="text-danger">', '</span>');
      }


         /**
         * Exports @users in xls format
         *
         * @param
         * @return
         */
         public function excel($type = 'xlsx') {
            // fetch data
            $rows = $this->Users_model->get_all();

            // initialize necessary values
            $i = 1; $x = 'A';
      
            // initialize phpexcel
            $objPHPExcel = new PHPExcel();

            // set properties
            $objPHPExcel->getProperties()->setCreator("Your Name");
            $objPHPExcel->getProperties()->setLastModifiedBy("Your Name");
            $objPHPExcel->getProperties()->setTitle("Office 2007 XLSX Users Document");
            $objPHPExcel->getProperties()->setSubject("Office 2007 XLSX Users Document");
            $objPHPExcel->getProperties()->setDescription("Users document for Office 2007 XLSX, generated using PHP classes.");

            // set active sheet
            $objPHPExcel->setActiveSheetIndex(0);

            // set header row
            $objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'No');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Username');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Email');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Password');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Role');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Active');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Avatar');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Verification Code');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Remember Me');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Last Login');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Created');
				$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, 'Updated');

				$objPHPExcel->getActiveSheet()->getStyle('A1:'.$x.'1')->getFont()->setBold(true);

            // increment & reset
            $i++; $x = 'A';

            // set data
            foreach ($rows as $row) {
               $objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $i-1);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->username);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->email);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->password);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->role);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->active);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->avatar);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->verification_code);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->remember_me);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->last_login);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->created);
					$objPHPExcel->getActiveSheet()->SetCellValue($x++.$i, $row->updated);$i++; $x = 'A';
            }

            // set headers
            header('Cache-Control: max-age=0');
            // If you're serving to IE 9, then the following may be needed
            header('Cache-Control: max-age=1');

            // If you're serving to IE over SSL, then the following may be needed
            header ('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
            header ('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT'); // always modified
            header ('Cache-Control: cache, must-revalidate'); // HTTP/1.1
            header ('Pragma: public'); // HTTP/1.0

            if($type === 'xlsx') {
               //xlsx
               header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
               header('Content-Disposition: attachment;filename="users.xlsx"');

               $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            }
            elseif ($type === 'xls') {
               //xls
               header('Content-Type: application/vnd.ms-excel');
               header('Content-Disposition: attachment;filename="users.xls"');

               $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
            }
            else {
               //csv
               header('Content-type: text/csv');
               header('Content-Disposition: attachment;filename="users.csv"');

               $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'CSV');
            }

            $objWriter->save('php://output');
            exit;
         }


         /**
         * Exports @users in doc format
         *
         * @param
         * @return
         */
         public function word() {
            header("Content-type: application/vnd.ms-word");
            header("Content-Disposition: attachment;Filename=users.doc");

            $data = array(
               'users_data' => $this->Users_model->get_all(),
               'start' => 0
            );

            $this->load->view('users/users_doc',$data);
         }


         /**
         * Exports @users in pdf format
         *
         * @param
         * @return
         */
         public function pdf() {
            $data = array(
               'users_data' => $this->Users_model->get_all(),
               'start' => 0
            );

            ini_set('memory_limit', '32M');

            $html = $this->load->view('users/users_pdf', $data, true);

            $mpdf = new \Mpdf\Mpdf();
            $mpdf->WriteHTML($html);
            $mpdf->Output('users.pdf', 'D');
         }


      /**
       * Upload excel
       *
       * xlsx|xls|csv file to be uploaded and imported into DB
       * Path of files to be uploaded --> ProjectName/uploads/excel/
      */
      public function upload_excel() {
         $config['upload_path'] = FCPATH.'uploads/excel/';
         $config['allowed_types'] = 'xls|xlsx|csv';
         $config['max_size'] = '5000';
         $this->load->library('upload', $config);

         if (!$this->upload->do_upload('userfile'))
         {
            $data = array('info' => $this->upload->display_errors());
            $this->session->set_userdata('message','File Upload Failed!');
            redirect(site_url('users'));
         }
         else {
            $data = $this->upload->data();
            $file_name = $data['file_name'];
            $file_path = FCPATH.'uploads/excel/'.$file_name;

            $objPHPExcel = PHPExcel_IOFactory::load($file_path);
            $objWorksheet = $objPHPExcel->setActiveSheetIndex(0);
            $totalrows = $objWorksheet->getHighestRow();

            for($i = 2; $i <= $totalrows; $i++) {
               $data_val = array(
						'username' => $objWorksheet->getCellByColumnAndRow(1,$i)->getValue(),
						'email' => $objWorksheet->getCellByColumnAndRow(2,$i)->getValue(),
						'password' => $objWorksheet->getCellByColumnAndRow(3,$i)->getValue(),
						'role' => $objWorksheet->getCellByColumnAndRow(4,$i)->getValue(),
						'active' => $objWorksheet->getCellByColumnAndRow(5,$i)->getValue(),
						'avatar' => $objWorksheet->getCellByColumnAndRow(6,$i)->getValue(),
						'verification_code' => $objWorksheet->getCellByColumnAndRow(7,$i)->getValue(),
						'remember_me' => $objWorksheet->getCellByColumnAndRow(8,$i)->getValue(),
						'last_login' => $objWorksheet->getCellByColumnAndRow(9,$i)->getValue(),
						'created' => $objWorksheet->getCellByColumnAndRow(10,$i)->getValue(),
						'updated' => $objWorksheet->getCellByColumnAndRow(11,$i)->getValue(),
					);

               $this->Users_model->insert($data_val);
            }

            $this->session->set_userdata('message','File Upload Success!');
            redirect(site_url('users'));
         }
      }
	}

	/* End of file ../application/modules/users/Users.php */