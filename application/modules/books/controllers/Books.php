<?php
    /**
    * Books Controller
    *
    * Availabe Methods are Index, json, read, create, update & delete
    * Generated by Harviacode Codeigniter CRUD Generator @ 2017-08-02 06:51:22.
    * For more info about harviacode visit @link.
    *
    * @author YOUR_NAME_HERE
    * @copyright Copyright (c) 2014 -2017, YOUR_NAME, YOUR_LINK
    * @license License_LINK, License_NAME
    * @link http://harviacode.com
    * @filesource ../application/modules/books/controllers/Books.php
    *
    */
    if (!defined('BASEPATH')) exit('No direct script access allowed');

    class Books extends MY_Controller {

        function __construct(){
            parent::__construct();
            $this->load->model('Books_model');
            $this->load->library('form_validation');
		}
        /**
        * Index
        *
        * Regular Tables
        * @param
        * @return
        */
        public function index() {
            $q = urldecode($this->input->get('q', TRUE));
            $start = intval($this->input->get('start'));
    
            if ($q <> '') {
                $config['base_url'] = base_url() . 'books/index.html?q=' . urlencode($q);
                $config['first_url'] = base_url() . 'books/index.html?q=' . urlencode($q);
            } else {
                $config['base_url'] = base_url() . 'books/index.html';
                $config['first_url'] = base_url() . 'books/index.html';
            }

            $config['per_page'] = 10;
            $config['page_query_string'] = TRUE;
            $config['total_rows'] = $this->Books_model->total_rows($q);
            $config['attributes'] = array('class' => 'page-link');
            $books = $this->Books_model->get_limit_data($config['per_page'], $start, $q);

            $this->load->library('pagination');
            $this->pagination->initialize($config);

            $data = array(
                'books_data' => $books,
                'q' => $q,
                'pagination' => $this->pagination->create_links(),
                'total_rows' => $config['total_rows'],
                'start' => $start,
            );
            $this->load->view('layouts/header');
            $this->load->view('books_list', $data);
            $this->load->view('layouts/footer');
        }

        /**
        * JSON
        *
        * Get json fromat of books
        *
        * @param
        * @return JSON output
        */
        public function json() {
            header('Content-Type: application/json');
            echo $this->Books_model->json();
        }
        /**
        * XML
        *
        * Get XML fromat of books
        *
        * @param
        * @return XML output
        */
        public function xml() {
            header('Content-Type: application/json');
            echo $this->Books_model->xml();
        }
        
   
        /**
        * Read single element @books
        *
        * @param int $id
        * @return view
        */
        public function read($id) {
            $row = $this->Books_model->get_by_id($id);
            if ($row) {
                $data = array(
						'id' => $row->id,
						'title' => $row->title,
					);
                $this->load->view('layouts/header');
                $this->load->view('books_read', $data);
                $this->load->view('layouts/footer');
            } else {
                $this->session->set_flashdata('message', 'Record Not Found');
                redirect(site_url('books'));
            }
        }

        /**
        * Create new element @books
        *
        * @param
        * @return view
        */
        public function create() {
            $data = array(
                'button' => 'Create',
                'action' => 'books/create_action',
					'id' => set_value('id'),
					'title' => set_value('title'),
				);
            $this->load->view('layouts/header');
            $this->load->view('books_form', $data);
            $this->load->view('layouts/footer');
        }

        /**
        * Validate Creation
        *
        * @param
        * @return view
        */
        public function create_action() {
            $this->_rules();

            if ($this->form_validation->run() == FALSE) {
                $this->create();
            } else {
                $data = array(
						'title' => $this->input->post('title',TRUE),
					);
                $this->Books_model->insert($data);
                $this->session->set_flashdata('message', 'Create Record Success');
                redirect(site_url('books'));
            }
        }

        /**
        * Update an element in books
        *
        * @param int $id
        * @return void
        */
        public function update($id) {
            $row = $this->Books_model->get_by_id($id);

            if ($row) {
                $data = array(
                    'button' => 'Update',
                    'action' => 'books/update_action',
						'id' => set_value('id', $row->id),
						'title' => set_value('title', $row->title),
					);
                $this->load->view('layouts/header');
                $this->load->view('books_form', $data);
                $this->load->view('layouts/footer');
            } else {
                $this->session->set_flashdata('message', 'Record Not Found');
                redirect(site_url('books'));
            }
        }

        /**
        * Validate update
        *
        * @param
        * @return view
        */
        public function update_action() {
            $this->_rules();

            if ($this->form_validation->run() == FALSE) {
                $this->update($this->input->post('id', TRUE));
            } else {
                $data = array(
						'title' => $this->input->post('title',TRUE),
				);

            $this->Books_model->update($this->input->post('id', TRUE), $data);
            $this->session->set_flashdata('message', 'Update Record Success');
            redirect(site_url('books'));
            }
        }

        /**
        * Delete an element from books
        *
        * @param int $id
        * @return view
        */
        public function delete($id) {
            $row = $this->Books_model->get_by_id($id);

            if ($row) {
                $this->Books_model->delete($id);
                $this->session->set_flashdata('message', 'Delete Record Success');
                redirect(site_url('books'));
            } else {
                $this->session->set_flashdata('message', 'Record Not Found');
                redirect(site_url('books'));
            }
        }

        /**
        * Validation Rules @books
        *
        * @param
        * @return
        */
        public function _rules() {
				$this->form_validation->set_rules('title', 'title', 'trim|required');

				$this->form_validation->set_rules('id', 'id', 'trim');
				$this->form_validation->set_error_delimiters('<span class="text-danger">', '</span>');
        }
	}

	/* End of file ../application/modules/books/Books.php */