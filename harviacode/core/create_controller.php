<?php

$string = "<?php
/**
* ".$c." Controller
*
* Availabe Methods are Index, json, xml, read, create, update & delete
* Generated by Harviacode Codeigniter CRUD Generator @ ".date('Y-m-d H:i:s').".
* For more info about harviacode visit @link.
*
* @author YOUR_NAME_HERE
* @copyright Copyright (c) 2014 -".date('Y').", YOUR_NAME, YOUR_LINK
* @license License_LINK, License_NAME
* @link http://harviacode.com
* @filesource ".$target."modules/$c_url/controllers/$c_file
*
*/
if (!defined('BASEPATH')) exit('No direct script access allowed');

class " . $c . " extends MY_Controller {

   function __construct() {
      parent::__construct();
      \$this->load->model('$m');
      \$this->load->library('form_validation');";
      if ($jenis_tabel <> 'reguler_table') { $string .= "\n\t\t\$this->load->library('datatables');"; }

      $string .= "\n\t }"; # Construct ends.

      if ($jenis_tabel == 'reguler_table') {
         $string .= "
         /**
         * Index
         *
         * Regular Tables
         * @param
         * @return
         */
         public function index() {
            \$q = urldecode(\$this->input->get('q', TRUE));
            \$start = intval(\$this->input->get('start'));

            if (\$q <> '') {
            \$config['base_url'] = base_url() . '$c_url/index.html?q=' . urlencode(\$q);
            \$config['first_url'] = base_url() . '$c_url/index.html?q=' . urlencode(\$q);
            } else {
            \$config['base_url'] = base_url() . '$c_url/index.html';
            \$config['first_url'] = base_url() . '$c_url/index.html';
            }

            \$config['per_page'] = 10;
            \$config['page_query_string'] = TRUE;
            \$config['total_rows'] = \$this->" . $m . "->total_rows(\$q);
            \$config['attributes'] = array('class' => 'page-link');
            \$$c_url = \$this->" . $m . "->get_limit_data(\$config['per_page'], \$start, \$q);

            \$this->load->library('pagination');
            \$this->pagination->initialize(\$config);

            \$data = array(
            '" . $c_url . "_data' => \$$c_url,
            'q' => \$q,
            'pagination' => \$this->pagination->create_links(),
            'total_rows' => \$config['total_rows'],
            'start' => \$start,
            );
            \$this->load->view('layouts/header');
            \$this->load->view('$v_list', \$data);
            \$this->load->view('layouts/footer');
         }

         /**
         * JSON
         *
         * Get json fromat of $table_name
         *
         * @param
         * @return JSON output
         */
         public function json() {
            header('Content-Type: application/json');
            echo \$this->" . $m . "->json();
         }
         
         /**
         * XML
         *
         * Get XML fromat of $table_name
         *
         * @param
         * @return XML output
         */
         public function xml() {
            header('Content-Type: application/xml');
            echo \$this->" . $m . "->xml();
         }
         ";

      } else {

         $string .="\n 
         /**
         * Index
         *
         * Data Tables
         * @param
         * @return
         */
         public function index() {
            \$data = array(
            '" . $c_url . "_data' => \$this->" . $m . "->get_all(),
            );
            \$this->load->view('layouts/header');
            \$this->load->view('$v_list', \$data);
            \$this->load->view('layouts/footer');
         }

         /**
         * JSON
         *
         * Get json fromat of $table_name
         *
         * @param
         * @return JSON output
         */
         public function json() {
            header('Content-Type: application/json');
            echo \$this->" . $m . "->json();
         }

         /**
         * XML
         *
         * Get XML fromat of $table_name
         *
         * @param
         * @return XML output
         */
         public function xml() {
            header('Content-Type: application/xml');
            echo \$this->Books_model->xml();
         }";

      }

      $string .= "\n";

      $string .= "/**
      * Read single element @$table_name
      *
      * @param int \$id
      * @return view
      */
      public function read(\$id) {
         \$row = \$this->" . $m . "->get_by_id(\$id);

         if (\$row) {
            \$data = array(";
            foreach ($all as $row) {
               $string .= "\n\t\t\t\t\t\t'" . $row['column_name'] . "' => \$row->" . $row['column_name'] . ",";
            }
            $string .= "\n\t\t\t\t\t);

            \$this->load->view('layouts/header');
            \$this->load->view('$v_read', \$data);
            \$this->load->view('layouts/footer');
         } else {
            \$this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('$c_url'));
         }
      }

      /**
      * Create new element @$table_name
      *
      * @param
      * @return view
      */
      public function create() {
         \$data = array(
         'button' => 'Create',
         'action' => '$c_url/create_action',";
         foreach ($all as $row) {
            $string .= "\n\t\t\t\t\t'" . $row['column_name'] . "' => set_value('" . $row['column_name'] . "'),";
         }
         $string .= "\n\t\t\t\t);

         \$this->load->view('layouts/header');
         \$this->load->view('$v_form', \$data);
         \$this->load->view('layouts/footer');
      }

      /**
      * Validate Creation
      *
      * @param
      * @return view
      */
      public function create_action() {
         \$this->_rules();

         if (\$this->form_validation->run() == FALSE) {
            \$this->create();
         } else {
            \$data = array(";
            foreach ($non_pk as $row) {
               $string .= "\n\t\t\t\t\t\t'" . $row['column_name'] . "' => \$this->input->post('" . $row['column_name'] . "',TRUE),";
            }
            $string .= "\n\t\t\t\t\t);

            \$this->".$m."->insert(\$data);
            \$this->session->set_flashdata('message', 'Create Record Success');
            redirect(site_url('$c_url'));
         }
      }

      /**
      * Update an element in $table_name
      *
      * @param int \$id
      * @return void
      */
      public function update(\$id) {
         \$row = \$this->".$m."->get_by_id(\$id);

         if (\$row) {
            \$data = array(
            'button' => 'Update',
            'action' => '$c_url/update_action',";
            foreach ($all as $row) {
               $string .= "\n\t\t\t\t\t\t'" . $row['column_name'] . "' => set_value('" . $row['column_name'] . "', \$row->". $row['column_name']."),";
            }
            $string .= "\n\t\t\t\t\t);

            \$this->load->view('layouts/header');
            \$this->load->view('$v_form', \$data);
            \$this->load->view('layouts/footer');
         } else {
            \$this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('$c_url'));
         }
      }

      /**
      * Validate update
      *
      * @param
      * @return view
      */
      public function update_action() {
         \$this->_rules();

         if (\$this->form_validation->run() == FALSE) {
            \$this->update(\$this->input->post('$pk', TRUE));
         } else {
            \$data = array(";
            foreach ($non_pk as $row) {
            $string .= "\n\t\t\t\t\t\t'" . $row['column_name'] . "' => \$this->input->post('" . $row['column_name'] . "',TRUE),";
            }    
            $string .= "\n\t\t\t\t);

            \$this->".$m."->update(\$this->input->post('$pk', TRUE), \$data);
            \$this->session->set_flashdata('message', 'Update Record Success');
            redirect(site_url('$c_url'));
         }
      }

      /**
      * Delete an element from $table_name
      *
      * @param int \$id
      * @return view
      */
      public function delete(\$id) {
         \$row = \$this->".$m."->get_by_id(\$id);

         if (\$row) {
            \$this->".$m."->delete(\$id);
            \$this->session->set_flashdata('message', 'Delete Record Success');
            redirect(site_url('$c_url'));
         } else {
            \$this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('$c_url'));
         }
      }

      /**
      * Validation Rules @$table_name
      *
      * @param
      * @return
      */
      public function _rules() {";
         foreach ($non_pk as $row) {
         $int = $row3['data_type'] == 'int' || $row['data_type'] == 'double' || $row['data_type'] == 'decimal' ? '|numeric' : '';
         $string .= "\n\t\t\t\t\$this->form_validation->set_rules('".$row['column_name']."', '".  strtolower(label($row['column_name']))."', 'trim|required$int');";
         }    

         $string .= "\n\n\t\t\t\t\$this->form_validation->set_rules('$pk', '$pk', 'trim');";
         $string .= "\n\t\t\t\t\$this->form_validation->set_error_delimiters('<span class=\"text-danger\">', '</span>');
      }";


      if ($export_excel == '1') {
         $string .= "\n\n
         /**
         * Exports @$table_name in xls format
         *
         * @param
         * @return
         */
         public function excel() {
            \$this->load->helper('exportexcel');
            \$namaFile = \"$table_name.xls\";
            \$judul = \"$table_name\";
            \$tablehead = 0;
            \$tablebody = 1;
            \$nourut = 1;

            //penulisan header
            header(\"Pragma: public\");
            header(\"Expires: 0\");
            header(\"Cache-Control: must-revalidate, post-check=0,pre-check=0\");
            header(\"Content-Type: application/force-download\");
            header(\"Content-Type: application/octet-stream\");
            header(\"Content-Type: application/download\");
            header(\"Content-Disposition: attachment;filename=\" . \$namaFile . \"\");
            header(\"Content-Transfer-Encoding: binary \");

            xlsBOF();

            \$kolomhead = 0;
            xlsWriteLabel(\$tablehead, \$kolomhead++, \"No\");";
         
            foreach ($non_pk as $row) {
               $column_name = label($row['column_name']);
               $string .= "\n\txlsWriteLabel(\$tablehead, \$kolomhead++, \"$column_name\");";
            }
         
            $string .= "\n\n\tforeach (\$this->" . $m . "->get_all() as \$data) {
            \$kolombody = 0;

            //ubah xlsWriteLabel menjadi xlsWriteNumber untuk kolom numeric
            xlsWriteNumber(\$tablebody, \$kolombody++, \$nourut);";
            foreach ($non_pk as $row) {
               $column_name = $row['column_name'];
               $xlsWrite = $row['data_type'] == 'int' || $row['data_type'] == 'double' || $row['data_type'] == 'decimal' ? 'xlsWriteNumber' : 'xlsWriteLabel';
               $string .= "\n\t    " . $xlsWrite . "(\$tablebody, \$kolombody++, \$data->$column_name);";
            }
            $string .= "\n\n\t\$tablebody++;
            \$nourut++;
         }

         xlsEOF();
         exit();
         }";
      }

      if ($export_word == '1') {
         $string .= "\n\n
         /**
         * Exports @$table_name in doc format
         *
         * @param
         * @return
         */
         public function word() {
            header(\"Content-type: application/vnd.ms-word\");
            header(\"Content-Disposition: attachment;Filename=$table_name.doc\");

            \$data = array(
               '" . $table_name . "_data' => \$this->" . $m . "->get_all(),
               'start' => 0
            );

            \$this->load->view('" . $c_url ."/". $v_doc . "',\$data);
         }";
      }

      if ($export_pdf == '1') {
         $string .= "\n\n
         /**
         * Exports @$table_name in pdf format
         *
         * @param
         * @return
         */
         public function pdf() {
            \$data = array(
               '" . $table_name . "_data' => \$this->" . $m . "->get_all(),
               'start' => 0
            );

            ini_set('memory_limit', '32M');

            \$html = \$this->load->view('" . $c_url ."/". $v_pdf . "', \$data, true);
            \$this->load->library('pdf');
            \$pdf = \$this->pdf->load();
            \$pdf->WriteHTML(\$html);
            \$pdf->Output('" . $table_name . ".pdf', 'D');
         }";
      }

      $string .= "\n\t}\n\n\t/* End of file ".$target."modules/$c_url/$c_file */";


$folderPath = $target.'modules/'.$c_url.'/controllers';
if (!is_dir($folderPath)) {
   try{ mkdir($folderPath, 0777, true); }
   
   catch(Exception $e) { echo "Error:\n" . $e->getMessage() . PHP_EOL; }
}

$newContent = '<!DOCTYPE html>
<html>
<head>
<title>403 Forbidden</title>
</head>
<body>

<p>Directory access is forbidden.</p>

</body>
</html>';

file_put_contents($folderPath.'/index.html',$newContent);

$hasil_controller = createFile($string, $folderPath."/".$c_file);

?>