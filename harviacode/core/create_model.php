<?php 

$string = "<?php
    /**
    * ".$c." Model
    *
    * Availabe Methods are json, get_all, get_by_id, total_rows, get_limit_data,
    * insert, update, delete
    * Generated by Harviacode Codeigniter CRUD Generator @ ".date('Y-m-d H:i:s').".
    * For more info about harviacode visit @link.
    *
    * @author YOUR_NAME_HERE
    * @copyright Copyright (c) 2014 -".date('Y').", YOUR_NAME, YOUR_LINK
    * @license License_LINK, License_NAME
    * @link http://harviacode.com
    * @filesource ".$target."modules/$c_url/models/$m_file
    *
    */
    if (!defined('BASEPATH')) exit('No direct script access allowed');

    class " . $m . " extends CI_Model {
        public \$table = '$table_name';
        public \$id = '$pk';
        public \$order = 'DESC';

        function __construct() {
            parent::__construct();
        }";

        if ($jenis_tabel <> 'reguler_table') {
    
            $column_all = array();
            foreach ($all as $row) {
                $column_all[] = $row['column_name'];
            }
            $columnall = implode(',', $column_all);
    
        $string .="\n
        /*
        There are some issues with csrf. it'll generate a 403 error.You can fix this.
        function json() {
            \$this->datatables->select('".$columnall."');
            \$this->datatables->from('".$table_name."');
            //add this line for join
            //\$this->datatables->join('table2', '".$table_name.".field = table2.field');
            \$this->datatables->add_column(
                'action',
                anchor(site_url('".$c_url."/read/\$1'),'Read').\" | \".
                anchor(site_url('".$c_url."/update/\$1'),'Update').\" | \".
                anchor(site_url('".$c_url."/delete/\$1'),'Delete','onclick=\"javasciprt: return confirm(\\'Are You Sure ?\\')\"'), '$pk');
            return \$this->datatables->generate();\n\t\t}
        */";
        }

        $string .="\n\n
        /**
        * JSON
        *
        * Get json fromat of $table_name
        *
        * @param
        * @return JSON output
        */
        function json() {
            return json_encode(\$this->db->get(\$this->table)->result());
        }

        /**
        * XML
        *
        * Get XML fromat of books
        *
        * @param
        * @return XML output
        */
        function xml() {
            return xmlrpc_encode(\$this->db->get(\$this->table)->result());
        }

        /**
        * GET_ALL
        *
        * Get all records of $table_name
        *
        * @param
        * @return object
        */
        function get_all() {
            \$this->db->order_by(\$this->id, \$this->order);
            return \$this->db->get(\$this->table)->result();
        }

        /**
        * GET_BY_ID
        *
        * Get all records by \$id of $table_name
        *
        * @param \$id
        * @return object
        */
        function get_by_id(\$id) {
            \$this->db->where(\$this->id, \$id);
            return \$this->db->get(\$this->table)->row();
        }
    
        /**
        * GET_TOTAL_ROWS
        *
        * Get all rows of $table_name
        *
        * @param \$q
        * @return int
        */
        function total_rows(\$q = NULL) {
            \$this->db->like('$pk', \$q);";

            foreach ($non_pk as $row) {
                $string .= "\n\t\t\t\$this->db->or_like('" . $row['column_name'] ."', \$q);";
            }    

            $string .= "\n\t\t\t\$this->db->from(\$this->table);
            return \$this->db->count_all_results();
        }

        /**
        * GET_LIMIT_DATA
        *
        * Get limit & search by term(q) of $table_name
        *
        * @param \$limit
        * @param \$start
        * @param \$q
        * @return int
        */
        function get_limit_data(\$limit, \$start = 0, \$q = NULL) {
            \$this->db->order_by(\$this->id, \$this->order);
            \$this->db->like('$pk', \$q);";

foreach ($non_pk as $row) {
    $string .= "\n\t\t\t\$this->db->or_like('" . $row['column_name'] ."', \$q);";
}    

$string .= "\n\t\t\t\$this->db->limit(\$limit, \$start);
            return \$this->db->get(\$this->table)->result();
        }

        /**
        * INSERT_DATA
        *
        * Insert data @ $table_name
        *
        * @param \$data
        * @return void
        */
        function insert(\$data) {
            \$this->db->insert(\$this->table, \$data);
        }

        /**
        * UPDATE_DATA
        *
        * Update data @ $table_name by \$id
        *
        * @param \$id
        * @param \$data
        * @return void
        */
        function update(\$id, \$data) {
            \$this->db->where(\$this->id, \$id);
            \$this->db->update(\$this->table, \$data);
        }

        /**
        * DELETE_DATA
        *
        * DELETE data @ $table_name by \$id
        *
        * @param \$id
        * @return void
        */
        function delete(\$id) {
            \$this->db->where(\$this->id, \$id);
            \$this->db->delete(\$this->table);
        }
    }

    /* End of file $m_file */\n";


$folderPath = $target.'modules/'.$c_url.'/models';
    if (!is_dir($folderPath)) {
        try{
            mkdir($folderPath, 0777, true);
        }
        catch(Exception $e) {
            echo "Error:\n" . $e->getMessage() . PHP_EOL;
        }
    }
    
$newContent = '
<!DOCTYPE html>
<html>
    <head>
        <title>403 Forbidden</title>
    </head>
    <body>

        <p>Directory access is forbidden.</p>

    </body>
</html>';

file_put_contents($folderPath.'/index.html',$newContent);

$hasil_model = createFile($string, $folderPath . "/" . $m_file);

?>